---
pagination:
  data: collections.post
  size: 1
  alias: post
permalink: /{{ post.data.slug }}/
---

{% extends 'base.njk' %}

{% block title %}
	{{ post.data.menuTitle }} | Bridging Systems
{% endblock %}

{% block head %}

	{% if post.data.dependencies.katex %}
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/katex.min.css" integrity="sha384-Um5gpz1odJg5Z4HAmzPtgZKdTBHZdw8S29IecapCSB31ligYPhHQZMIlWLYQGVoc" crossorigin="anonymous">
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/katex.min.js" integrity="sha384-YNHdsYkH6gMx9y3mRkmcJ2mFUjTd0qNQQvY9VYZgQd7DcN7env35GzlmFaZ23JGp" crossorigin="anonymous"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/auto-render.min.js" integrity="sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl" crossorigin="anonymous"></script>
		<script>
			document.addEventListener("DOMContentLoaded", function() {
				renderMathInElement(document.body, {
					// customised options
					// • auto-render specific keys, e.g.:
					delimiters: [
						{left: '$$', right: '$$', display: true},
						{left: '$', right: '$', display: false},
						{left: '\\(', right: '\\)', display: false},
						{left: '\\[', right: '\\]', display: true}
					],
					// • rendering keys, e.g.:
					throwOnError : false
				});
			});
		</script>
	{% endif %}

	{% if post.data.dependencies.d3 %}
		<meta charset="utf-8">
		<script src="https://d3js.org/d3.v6.min.js"></script>
	{% endif %}

	{% if post.data.dependencies.vega %}
		<meta charset="utf-8">
		<script src="https://cdn.jsdelivr.net/npm/vega@5"></script>
		<script src="https://cdn.jsdelivr.net/npm/vega-lite@5"></script>
		<script src="https://cdn.jsdelivr.net/npm/vega-embed@6"></script>
	{% endif %}

	<script type="text/javascript">
		function loadCSS(path) { 
			let file = document.createElement("link");
			file.setAttribute("rel", "stylesheet");
			file.setAttribute("type", "text/css");
			file.setAttribute("href", path);
			document.head.appendChild(file);
		}

		var graphs = [];
	</script>

	{% if post.data.hidden %}
		<meta name="robots" content="noindex">
		<meta name="googlebot" content="noindex">
	{% endif %}    

{% endblock %}

{% block body_class %}post{% endblock %}

{% block outline %}
	{{ post.templateContent | outline | safe }}
{% endblock %}

{% block content %}

	{% if post.data.draft %}
		<div class="banner">
			This page is a public draft. All content is provisional.
		</div>
	{% endif %}


	<article>
		
		<h1 class="title">{{ post.data.title }}</h1>

		<h2 class="description">{{ post.data.description | safe }}</h2>
	
		{% if post.data.noMarkdown %}
			{{ post.templateContent | safe }}
		{% else %}
			{{ post.templateContent | markdown | footnotes_to_sidenotes | citations | safe }}
		{% endif %}

	</article>


	{% if not post.data.tags.includes('page') %}
	<div class="backmatter">

		{% if post.data.acknowledgements %}
			<section>
				<h1>Acknowledgements</h1>
				{{ post.data.acknowledgements | markdown | safe }}
			</section>
		{% endif %}

		<section>
			{{ post.templateContent | markdown | get_footnotes | safe }}
		</section>

		{% if post.data.references %}
			<section>
				{{ post.data.references | bibliography | safe }}
			</section>
		{% endif %}
		
		<section>
			<h1>License</h1>
			<p>This website and its content is made available under the <a href="https://github.com/luke-thorburn/bridging-systems/blob/main/LICENSE">MIT License</a>.</p>
		</section>

		{% if post.data.authors %}
		<section>
		<h1>Citation</h1>
		<p>In academic contexts, please cite this work using a citation similar to the following.</p>
		<pre class="wrap">{{ post.data.authors | citation_authors }}, "{{ post.data.title }}", Bridging Systems, {{ post.data.date | get_year }}.</pre>
		<p>Here is the BibTeX entry.</p>
<pre>@article{ {{- post.data.slug }}{{ post.data.date | get_year }},
  author = { {{- post.data.authors | bibtex_authors -}} },
  title = { {{- post.data.title -}} },
  journal = {Bridging Systems},
  year = { {{- post.data.date | get_year -}} },
  url = {https://bridging.systems/{{ post.data.slug }}/}
}</pre>
		</section>
	{% endif %}

	</div>
	{% endif %}

	<script>
		// UTILITY FUNCTIONS FOR COLLAPSIBLE SECTIONS

		// document.querySelector('.collapsible')
		// 	.addEventListener("click", function(ev) {
		// 		ev.target.classList.toggle('collapsed');
		// 	})

		// UTILITY FUNCTIONS FOR CITATION POPUPS.

		var mouseOverModal = false;

		function create_modal_ref(el, id) {
			
			let bibref = document.querySelector(`#bib-${id}`),
				text_column = document.querySelector('article > p').getBoundingClientRect();

			let ref = document.createElement("div");
			ref.setAttribute('class', 'hover-ref');
			ref.setAttribute('style', `top: ${el.getBoundingClientRect().bottom + 10}px; left: ${text_column.left}px; width: ${text_column.right - text_column.left}px;`)
			ref.setAttribute('onmouseenter', 'hovering()');
			ref.setAttribute('onmouseleave', 'unhovering()');
			ref.innerHTML = bibref.innerHTML;

			document.querySelector('article').appendChild(ref); 

			mouseOverModal = true;
		}

		function destroy_modal_ref() {
			mouseOverModal = false;
			setTimeout(() => {
				if (!mouseOverModal) {
					let refs = document.querySelectorAll('.hover-ref');
					for (let ref of refs) {
						ref.remove();
					}
				}
			}, 150);
		}

		function hovering() {
			mouseOverModal = true;
		}

		function unhovering() {
			mouseOverModal = false;
			setTimeout(() => {
				if (!mouseOverModal) {
					let refs = document.querySelectorAll('.hover-ref');
					for (let ref of refs) {
						ref.remove();
					}
				}
			}, 150);
		}
	</script>

	<script type="text/javascript">

		var views = {};

		function render(key, spec) {
			
			// Add default graph config.

			let defaultConfig = {
				axis: {
					labelFont: "Roboto, Helvetica, Arial, sans-serif",
					titleFont: "Roboto, Helvetica, Arial, sans-serif",
					titleFontSize: 20,
					titleFontWeight: 400,
					titleColor: "#33691e"
				}, 
				legend: {
					labelFont: "Roboto, Helvetica, Arial, sans-serif",
					titleFont: "Roboto, Helvetica, Arial, sans-serif",
					labelFontSize: 18,
					labelColor: "#000000",
					titleColor: "#33691e",
					titlePadding: 15,
					titleFontSize: 18,
					symbolSize: 360,
					labelSeparation: 10,
					labelOffset: 10,
					offset: 20,
					titleFontWeight: 500,
					labelFontWeight: 300,
					layout: {
						margin: 30
					}
				},
				title: {
					font: "Roboto, Helvetica, Arial, sans-serif",
					subtitleFont: "Roboto, Helvetica, Arial, sans-serif",
					fontSize: 22,
					fontWeight: 500,
					color: "#33691e",
					subtitleFontSize: 20,
					subtitleFontWeight: 300,
					subtitlePadding: 12,
					offset: 30
				}
			};
			if (spec.hasOwnProperty('config')) {
				spec.config.axis = { ...defaultConfig.axis, ...spec.config.axis };
				spec.config.legend = { ...defaultConfig.legend, ...spec.config.legend };
				spec.config.title = { ...defaultConfig.title, ...spec.config.title };
			} else {
				spec.config = defaultConfig;
			}

			// Create BC property if doesn't already exist.

			if (!spec.hasOwnProperty('BC')) {
				spec.BC = {};
			}

			// Specify renderer if not already specified.

			if (!spec.BC.hasOwnProperty('renderer')) {
				spec.BC.renderer = 'svg'; // Either 'svg' or 'canvas'.
			}

			// Define desired aspect ratio.

			if (spec.hasOwnProperty('width') & spec.hasOwnProperty('height')) {
				spec.BC.aspectRatio = spec.width / spec.height;
			} else {
				spec.BC.aspectRatio = 1.5;
			}
			delete spec.width;
			delete spec.height;

			// Define threshold width between two types of graph scaling.
				// Above this width, the graph is re-rendered to fit the space available.
				// (eg. text will stay its specified size)
				// Below this width, the graph is simply scaled down to fit the space available.
				// (eg. text will be smaller than the specified size)
			if (!spec.BC.hasOwnProperty('minWidth')) {
				spec.BC.minWidth = 800;
			}

			// Generate signals for specified toggles.

			if (!spec.hasOwnProperty('signals')) {
				spec.signals = [];
			}
			if (spec.BC.hasOwnProperty('toggle-groups')) {
				for (let toggleGroup of spec.BC['toggle-groups']) {
					for (let toggle of toggleGroup.toggles) {
						spec.signals.push({
							name: toggle.signalName,
							update: `'${toggle.options.filter(d => d.default)[0].value}'`,
							on: [{
								events: {
									source: `#select-${key}-${toggle.signalName}`,
									type: "change"
								},
								update: "event.target.value"
							}]
						})
					}
				}
			}

			// Store reference to wrapper element.

			spec.BC.container = document.querySelector(`#graph-container-${key}`);

			// Create the view.

			let width = Math.max(spec.BC.container.offsetWidth, spec.BC.minWidth);
			vegaEmbed(
				`#graph-container-${key}`,
				spec,
				opt = {
					renderer: spec.BC.renderer,
					actions: false,
					width: width,
					height: width / spec.BC.aspectRatio
				}
			).then(function(result) {
				
				views[key] = result.view;

				// Make responsive.

				if (spec.BC.renderer === 'canvas') {
					
					spec.BC.resize = () => {
						let width = Math.max(spec.BC.container.offsetWidth, spec.BC.minWidth);
						views[key]
							.width(width)
							.height(width / spec.BC.aspectRatio)
							.run();
					};
					window.addEventListener('resize', spec.BC.resize);
				
				} else {
					
					function removeWidthHeightAttributes() {
						// Remove width/height attributes of Vega SVG and let viewBox handle the responsive behaviour.
						let viewDom = spec.BC.container.firstElementChild;
						viewDom.removeAttribute('width');
						viewDom.removeAttribute('height');
					}

					spec.BC.resize = () => {
						let width = Math.max(spec.BC.container.offsetWidth, spec.BC.minWidth);
						views[key]
							.width(width)
							.height(width / spec.BC.aspectRatio)
							.runAsync()
							.then(vw => {
								removeWidthHeightAttributes();
							});
						
					};
					window.addEventListener('resize', spec.BC.resize);

					removeWidthHeightAttributes();
					
				}

			}).catch(console.error);

			return views[key];

		}
  
		for (let key of graphs) {
		
			fetch('/posts/{{ post.data.slug }}/graph-' + key + '.json')
				.then(result => result.json())
				.then(spec => render(key, spec))
				.catch(err => console.error(err));

		}

	</script>

{% endblock %}